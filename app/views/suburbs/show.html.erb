

<script>
  // Create a new blank array for all the listing markers of the properties.
  var markersProperties = [];

  // This function is in response to the user selecting "show route" on one
  // of the markers within the calculated distance. This will display the route
  // on the map.

  function displayDirections(origin) {
    console.log(origin);
    hideMarkersProperties(markersProperties);
    console.log(map);
    var directionsService = new google.maps.DirectionsService;
    // Get the destination address from the user entered value.
    var destinationAddress =
        document.getElementById('search-within-time-text').value;
    // Get mode again from the user entered value.
    var mode = document.getElementById('mode').value;
    directionsService.route({
      // The origin is the passed in marker's position.
      origin: origin,
      // The destination is user entered address.
      destination: destinationAddress,
      travelMode: google.maps.TravelMode[mode]
    }, function(response, status) {
      if (status === google.maps.DirectionsStatus.OK) {
        console.log("Status: OK");
        console.log(response);
        var directionsDisplay = new google.maps.DirectionsRenderer();
        directionsDisplay.setDirections(response);
        console.log(directionsDisplay);
        directionsDisplay.setMap(window.myMap);
        // var directionsDisplay = new google.maps.DirectionsRenderer({
        //   setMap: map,
        //   directions: response,
        //   draggable: true,
        //   polylineOptions: {
        //     strokeColor: 'green'
        //   }
        // });
      } else {
        window.alert('Directions request failed due to ' + status);
      }
    });
  }

  // This function will loop through the listings and hide them all.
  function hideMarkersProperties(markers) {
    for (var i = 0; i < markersProperties.length; i++) {
      markersProperties[i].setMap(null);
    }
  }
    function initMap(lat, lng, name) {
      // Styles for map rendering
      var styles = [
          {
            featureType: 'water',
            stylers: [
              { color: '#19a0d8' }
            ]
          },{
            featureType: 'administrative',
            elementType: 'labels.text.stroke',
            stylers: [
              { color: '#ffffff' },
              { weight: 6 }
            ]
          },{
            featureType: 'administrative',
            elementType: 'labels.text.fill',
            stylers: [
              { color: '#e85113' }
            ]
          },{
            featureType: 'road.highway',
            elementType: 'geometry.stroke',
            stylers: [
              { color: '#efe9e4' },
              { lightness: -40 }
            ]
          },{
            featureType: 'transit.station',
            stylers: [
              { weight: 9 },
              { hue: '#e85113' }
            ]
          },{
            featureType: 'road.highway',
            elementType: 'labels.icon',
            stylers: [
              { visibility: 'off' }
            ]
          },{
            featureType: 'water',
            elementType: 'labels.text.stroke',
            stylers: [
              { lightness: 100 }
            ]
          },{
            featureType: 'water',
            elementType: 'labels.text.fill',
            stylers: [
              { lightness: -100 }
            ]
          },{
            featureType: 'poi',
            elementType: 'geometry',
            stylers: [
              { visibility: 'on' },
              { color: '#f0e4d3' }
            ]
          },{
            featureType: 'road.highway',
            elementType: 'geometry.fill',
            stylers: [
              { color: '#efe9e4' },
              { lightness: -25 }
            ]
          }
      ];

      var myCoords = new google.maps.LatLng(lat, lng);
      var mapOptions = {
      center: myCoords,
      zoom: 15,
      styles: styles
      };


      // This function takes in a COLOR, and then creates a new marker
      // icon of that color. The icon will be 21 px wide by 34 high, have an origin
      // of 0, 0 and be anchored at 10, 34).
      function makeMarkerIcon(markerColor) {
        var markerImage = new google.maps.MarkerImage(
          'http://chart.googleapis.com/chart?chst=d_map_spin&chld=1.15|0|'+ markerColor +
          '|40|_|%E2%80%A2',
          new google.maps.Size(21, 34),
          new google.maps.Point(0, 0),
          new google.maps.Point(10, 34),
          new google.maps.Size(21,34));
        return markerImage;
      }

      function populateInfoWindow(marker, infowindow) {
        // Check to make sure the infowindow is not already opened on this marker.
        if (infowindow.marker != marker) {
          // Clear the infowindow content to give the streetview time to load.
          infowindow.setContent('');
          infowindow.marker = marker;
          // Make sure the marker property is cleared if the infowindow is closed.
          infowindow.addListener('closeclick', function() {
            infowindow.marker = null;
          });
          var streetViewService = new google.maps.StreetViewService();
          var radius = 50;
          // In case the status is OK, which means the pano was found, compute the
          // position of the streetview image, then calculate the heading, then get a
          // panorama from that and set the options
          function getStreetView(data, status) {
            if (status == google.maps.StreetViewStatus.OK) {
              var nearStreetViewLocation = data.location.latLng;
              var heading = google.maps.geometry.spherical.computeHeading(
                nearStreetViewLocation, marker.position);
                infowindow.setContent('<div>' + marker.title + '</div><div id="pano"></div>');
                var panoramaOptions = {
                  position: nearStreetViewLocation,
                  pov: {
                    heading: heading,
                    pitch: 30
                  }
                };
              var panorama = new google.maps.StreetViewPanorama(
                document.getElementById('pano'), panoramaOptions);
            } else {
              infowindow.setContent('<div>' + marker.title + '</div>' +
                '<div>No Street View Found</div>');
            }
          }
          // Use streetview service to get the closest streetview image within
          // 50 meters of the markers position
          streetViewService.getPanoramaByLocation(marker.position, radius, getStreetView);
          // Open the infowindow on the correct marker.
          infowindow.open(map, marker);
        }
      }

      var map = new google.maps.Map(document.getElementById('map'), mapOptions);
      window.myMap = map;

      // Style the markers a bit. This will be our listing marker icon.
      var defaultIcon = makeMarkerIcon('0091ff');

      // Create a "highlighted location" marker color for when the user
      // mouses over the marker.
      var highlightedIcon = makeMarkerIcon('FFFF24');

      var largeInfowindow = new google.maps.InfoWindow();

      var marker = new google.maps.Marker({
          position: myCoords,
          map: map,
          icon: defaultIcon,
          title: 'First Marker'
      });




      // Create an onclick event to open the large infowindow at each marker.
      marker.addListener('click', function() {
        populateInfoWindow(this, largeInfowindow);
      });
      // Two event listeners - one for mouseover, one for mouseout,
      // to change the colors back and forth.
      marker.addListener('mouseover', function() {
        this.setIcon(highlightedIcon);
      });
      marker.addListener('mouseout', function() {
        this.setIcon(defaultIcon);
      });

      // This function will loop through the listings and hide them all.
      function hideMarkers(markers) {
        for (var i = 0; i < markers.length; i++) {
          markers[i].setMap(null);
        }
      }


      // This function firest when the user select "go" on the places search.
      // It will do a nearby search using the entered query string or place.
      function textSearchPlaces() {
        var bounds = map.getBounds();
        hideMarkers(placeMarkers);
        var placesService = new google.maps.places.PlacesService(map);
        var locDomQuery = document.getElementsByClassName("suburb_description");
        var locationQuery = locDomQuery[0].firstElementChild.innerText;
        // var qSearch = document.getElementById('places-search').value;
        var test = document.getElementById('myList').value;
        var suburbNameTest = "<%= @suburb.name %>";
        var finalQuery = test + " near by " + suburbNameTest;
        console.log(finalQuery);
        placesService.textSearch({
          query: finalQuery,
          bounds: bounds
        }, function(results, status) {
          if (status === google.maps.places.PlacesServiceStatus.OK) {
            createMarkersForPlaces(results);
          }
        });
      }

      // This function creates markers for each place found in either places search.
      function createMarkersForPlaces(places) {
        var bounds = new google.maps.LatLngBounds();
        for (var i = 0; i < places.length; i++) {
          var place = places[i];
          console.log(place);
          var icon = {
            url: place.icon,
            size: new google.maps.Size(35, 35),
            origin: new google.maps.Point(0, 0),
            anchor: new google.maps.Point(15, 34),
            scaledSize: new google.maps.Size(25, 25)
          };
          // Create a marker for each place.
          var marker = new google.maps.Marker({
            map: map,
            icon: icon,
            title: place.name,
            position: place.geometry.location,
            id: place.id
          });
          // If a marker is clicked, do a place details search on it in the next function.
          marker.addListener('click', function() {
          getPlacesDetails(this, place);
          });
          placeMarkers.push(marker);
          if (place.geometry.viewport) {
            // Only geocodes have viewport.
            bounds.union(place.geometry.viewport);
          } else {
            bounds.extend(place.geometry.location);
          }
        }
        map.fitBounds(bounds);
      }

    // This is the PLACE DETAILS search - it's the most detailed so it's only
    // executed when a marker is selected, indicating the user wants more
    // details about that place.
    function getPlacesDetails(marker, infowindow) {
      console.log(infowindow);
      var service = new google.maps.places.PlacesService(map);
      // console.log(service);
      service.getDetails({
        placeId: marker.id
      }, function(place, status) {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
          // Set the marker property on this infowindow so it isn't created again.
          infowindow.marker = marker;

          var innerHTML = '<div>';
          if (place.name) {
            innerHTML += '<strong>' + place.name + '</strong>';
          }
          if (place.formatted_address) {
            innerHTML += '<br>' + place.formatted_address;
          }
          if (place.formatted_phone_number) {
            innerHTML += '<br>' + place.formatted_phone_number;
          }
          if (place.opening_hours) {
            innerHTML += '<br><br><strong>Hours:</strong><br>' +
                place.opening_hours.weekday_text[0] + '<br>' +
                place.opening_hours.weekday_text[1] + '<br>' +
                place.opening_hours.weekday_text[2] + '<br>' +
                place.opening_hours.weekday_text[3] + '<br>' +
                place.opening_hours.weekday_text[4] + '<br>' +
                place.opening_hours.weekday_text[5] + '<br>' +
                place.opening_hours.weekday_text[6];
          }
          if (place.photos) {
            innerHTML += '<br><br><img src="' + place.photos[0].getUrl(
                {maxHeight: 100, maxWidth: 200}) + '">';
          }
          innerHTML += '</div>';
          infowindow.setContent(innerHTML);
          infowindow.open(map, marker);
          // Make sure the marker property is cleared if the infowindow is closed.
          infowindow.addListener('closeclick', function() {
            infowindow.marker = null;
          });
        }
      });
    }//end getDetails


//////////////// Properties Display

// Create a new blank array for all the listing markers of the properties.
// var markersProperties = [];

// Style the markers a bit. This will be our listing marker icon for the properties.
var defaultIconProperty = makeMarkerIcon('0ea800');

// Create a "highlighted location" marker color for when the user
// mouses over the marker.
var highlightedIconProperty = makeMarkerIcon('FFFF24');



  var locations = [];

  <% @suburb.houses.each do |house| %>
    console.log(<%= house.price %>);
    locations.push({title: "Property", location: {lat: <%= house.lat %> , lng: <%= house.long %>}});

  <% end %>

  console.log(locations);


  // The following group uses the location array to create an array of markers on initialize.
  for (var i = 0; i < locations.length; i++) {
    // Get the position from the location array.
    var position = locations[i].location;
    var title = locations[i].title;
    // Create a marker per location, and put into markers array.
    var markerProperty = new google.maps.Marker({
      title: title,
      position: position,
      animation: google.maps.Animation.DROP,
      icon: defaultIconProperty,
      id: i
    });

    // Push the marker to our array of markers.
    markersProperties.push(markerProperty);

    // Two event listeners - one for mouseover, one for mouseout,
    // to change the colors back and forth.
    markerProperty.addListener('mouseover', function() {
      this.setIcon(highlightedIconProperty);
    });
    markerProperty.addListener('mouseout', function() {
      this.setIcon(defaultIconProperty);
    });

    // Create an onclick event to open the large infowindow at each marker.
    markerProperty.addListener('click', function() {
      populateInfoWindow(this, largeInfowindow);
    });

  }

  document.getElementById('show-listings').addEventListener('click', showListings);

  // This function will loop through the markers array and display them all.
  function showListings() {
    var bounds = new google.maps.LatLngBounds();
    // Extend the boundaries of the map for each marker and display the marker
    for (var i = 0; i < markersProperties.length; i++) {
      markersProperties[i].setMap(map);
      bounds.extend(markersProperties[i].position);
    }
    map.fitBounds(bounds);
  }

  document.getElementById('hide-listings').addEventListener('click', function() {
  hideMarkersProperties(markersProperties);});


  ///////////////// time-travel search

  document.getElementById('search-within-time').addEventListener('click', function() {
          searchWithinTime();
  });

  // This function allows the user to input a desired travel time, in
      // minutes, and a travel mode, and a location - and only show the listings
      // that are within that travel time (via that travel mode) of the location
      function searchWithinTime() {
        // Initialize the distance matrix service.
        var distanceMatrixService = new google.maps.DistanceMatrixService;
        var address = document.getElementById('search-within-time-text').value;
        // Check to make sure the place entered isn't blank.
        if (address == '') {
          window.alert('You must enter an address.');
        } else {
          hideMarkersProperties(markersProperties);
          // Use the distance matrix service to calculate the duration of the
          // routes between all our markers, and the destination address entered
          // by the user. Then put all the origins into an origin matrix.
          var origins = [];
          for (var i = 0; i < markersProperties.length; i++) {
            origins[i] = markersProperties[i].position;
          }
          var destination = address;
          var mode = document.getElementById('mode').value;
          // Now that both the origins and destination are defined, get all the
          // info for the distances between them.
          distanceMatrixService.getDistanceMatrix({
            origins: origins,
            destinations: [destination],
            travelMode: google.maps.TravelMode[mode],
            unitSystem: google.maps.UnitSystem.METRIC,
          }, function(response, status) {
            if (status !== google.maps.DistanceMatrixStatus.OK) {
              window.alert('Error was: ' + status);
            } else {
              displayMarkersWithinTime(response);
            }
          });
        }
      }

      // This function will go through each of the results, and,
      // if the distance is LESS than the value in the picker, show it on the map.
      function displayMarkersWithinTime(response) {
        var maxDuration = document.getElementById('max-duration').value;
        var origins = response.originAddresses;
        var destinations = response.destinationAddresses;
        // Parse through the results, and get the distance and duration of each.
        // Because there might be  multiple origins and destinations we have a nested loop
        // Then, make sure at least 1 result was found.
        var atLeastOne = false;
        for (var i = 0; i < origins.length; i++) {
          var results = response.rows[i].elements;
          for (var j = 0; j < results.length; j++) {
            var element = results[j];
            if (element.status === "OK") {
              // The distance is returned in feet, but the TEXT is in miles. If we wanted to switch
              // the function to show markers within a user-entered DISTANCE, we would need the
              // value for distance, but for now we only need the text.
              var distanceText = element.distance.text;
              // Duration value is given in seconds so we make it MINUTES. We need both the value
              // and the text.
              var duration = element.duration.value / 60;
              var durationText = element.duration.text;
              if (duration <= maxDuration) {
                //the origin [i] should = the markersProperties[i]
                markersProperties[i].setMap(map);
                atLeastOne = true;
                // Create a mini infowindow to open immediately and contain the
                // distance and duration
                var infowindow = new google.maps.InfoWindow({
                  content: durationText + ' away, ' + distanceText +
                    '<div><input type=\"button\" value=\"View Route\" onclick =' +
                    '\"displayDirections(&quot;' + origins[i] + '&quot;);\"></input></div>'
                });
                infowindow.open(map, markersProperties[i]);
                // Put this in so that this small window closes if the user clicks
                // the marker, when the big infowindow opens
                markersProperties[i].infowindow = infowindow;
                google.maps.event.addListener(markersProperties[i], 'click', function() {
                  this.infowindow.close();
                });
              }
            }
          }
        }
        if (!atLeastOne) {
          window.alert('We could not find any locations within that distance!');
        }
      }

      // This function is in response to the user selecting "show route" on one
      // of the markers within the calculated distance. This will display the route
      // on the map.

    document.getElementById('new-search').addEventListener('click', function() {
            location.reload();
    });




    // Listen for the event fired when the user selects a prediction and clicks
    // "go" more details for that place.
    document.getElementById('go-places').addEventListener('click', textSearchPlaces);


  }//end init function

    // Create placemarkers array to use in multiple functions to have control
    // over the number of places that show.
    var placeMarkers = [];
    document.addEventListener("DOMContentLoaded", function(){
        initMap(<%=@suburb.lat%>, <%=@suburb.long%>)
    });
</script>

<!-- Need to paste styling here to get access to the ERB tags! -->
<style>
.parallax {
min-height: 700px;
background-attachment: fixed;
background-size: cover;
background-position: 50% 50%;
background-image: url('<%= @suburb.image_url %>');
margin-bottom: 0;
}
</style>
<div class="jumbotron jumbotron-fluid parallax">
  <div class="container">
    <h1 class="jumbo_text font-weight-bolder"><%= @suburb.name %></h1>
  </div>
</div>
<!-- Carousel -->
<!-- <div class="show_carousel ">
  <div class="carousel">
    <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
    <ol class="carousel-indicators">
      <li data-target="#carouselExampleIndicators" data-slide-to="0" class="active"></li>
      <li data-target="#carouselExampleIndicators" data-slide-to="1"></li>
      <li data-target="#carouselExampleIndicators" data-slide-to="2"></li>
    </ol>
    <div class="carousel-inner">
      <div class="carousel-item active">
        <img src="<%= @suburb.image_url %>" class="d-block w-100" alt="...">
      </div>
      <div class="carousel-item">
        <img src="<%= @suburb.image_url %>" class="d-block w-100" alt="...">
      </div>
      <div class="carousel-item">
        <img src="<%= @suburb.image_url %>" class="d-block w-100" alt="...">
      </div>
    </div>
    <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
      <span class="carousel-control-prev-icon" aria-hidden="true"></span>
      <span class="sr-only">Previous</span>
    </a>
    <a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
      <span class="carousel-control-next-icon" aria-hidden="true"></span>
      <span class="sr-only">Next</span>
    </a>
    </div>
  </div>
</div> -->
<!-- Carousel END -->

<!-- Secondary Nav -->
<div class="show_secondary_nav sticky-top features_navbar">
  <ul class="nav nav-pills nav-fill">
    <li class="nav-item">

      <a class="font-weight-light" href="<%= suburbs_path %>"><i class="fa fa-angle-left"></i> All Suburbs </a>
    </li>
    <li class="nav-item">
      <a href="#summary">Summary</a>
      <!-- class="active_underline"  -->
    </li>
    <li class="nav-item">
      <a href="#amenities">Amenities</a>
    </li>
    <li class="nav-item">
      <a href="#renting">Renting in <%= @suburb.name %></a>
    </li>
    <li class="nav-item">
      <a href="#transport">Transport</a>
    </li>
    <li class="nav-item">
      <a href="#lifestyle">Lifestyle</a>
    </li>
    <li class="nav-item">
      <a href="#living_cost">Cost of Living</a>
    </li>
    <li class="nav-item">
      <a href="#entertainment">Entertainment</a>
    </li>
  </ul>
<div><a id="summary"></div>
</div>
<!-- Secondary Nav END -->

<!-- Summary block -->
<div class="show_summary">
  <!-- Suburb Description -->
  <div class="suburb_description">
    <h2>Living in <%= @suburb.name %></h2>
    <p><%= @suburb.description %></p>
  </div>

  <!-- Suburb Gallery -->
  <div class="suburb_gallery">
      <img src="<%= @suburb.image_url %>" class="" style="width: 18rem;" alt="<%= @suburb.name %> gallery image one">
      <img src="<%= @suburb.image_url %>" class="" style="width: 18rem;" alt="<%= @suburb.name %> gallery image two">
      <img src="<%= @suburb.image_url %>" class="" style="width: 18rem;" alt="<%= @suburb.name %> gallery image three">
      <img src="<%= @suburb.image_url %>" class="" style="width: 18rem;" alt="<%= @suburb.name %> gallery image four">
      <img src="<%= @suburb.image_url %>" class="" style="width: 18rem;" alt="<%= @suburb.name %> gallery image five">
      <img src="<%= @suburb.image_url %>" class="" style="width: 18rem;" alt="<%= @suburb.name %> gallery image six">
  </div>
<div><a id="amenities"></div>
</div>

<!-- Summary block END -->

<!-- Amenities w/ Map block -->
<div class="show_amenities">
  <div class="amenities_description">
    <div>
      <div class="inline_block"><h2>Amenities</h2></div>
    </div>
    <h5 class="top_spacing text-muted font-weight-normal">Property listings</h5>
    <div class="top_spacing">
        <input class="button_green" id="show-listings" type="button" value="Show Listings">
        <input class="button_green" id="hide-listings" type="button" value="Hide Listings">
    </div>
    <h5 class="text-muted top_spacing_specific font-weight-normal">Estimate commute from properties</h5>
    <div>
      <span class="text"> Within </span>
      <select class="dropdown_button" id="max-duration">
        <option value="10">10 min</option>
        <option value="15">15 min</option>
        <option value="30">30 min</option>
        <option value="60">1 hour</option>
        <option value="120">2 hours</option>
      </select>
      <select class="dropdown_button" id="mode">
        <option value="DRIVING">Drive</option>
        <option value="WALKING">Walk</option>
        <option value="BICYCLING">Bike</option>
        <option value="TRANSIT">Transit</option>
      </select>
      <span class="text">of</span>
      <input class="text_input" id="search-within-time-text" type="text" placeholder="Location address">
      <input class="btn-danger" id="search-within-time" type="button" value="Go">
    </div>
    <hr class="hr_spacing">
    <h5 class="text-muted font-weight-normal">Explore the area</h5>
    <span class="text">Search for:</span>
    <!-- <input id="places-search" type="text" placeholder="Ex: Trains"> -->
    <select id = "myList"class="dropdown_button">
      <option value = "Train Station">Train Stations</option>
      <option value = "Bus Station">Bus Stations</option>
      <option value = "Parks">Parks</option>
      <option value = "Beaches">Beaches</option>
      <option value = "Shopping">Shopping</option>
      <option value = "School">Schools</option>
      <option value = "Cafes">Cafés</option>
      <option value = "Pubs">Pubs</option>
      <option value = "Hospital">Hospitals</option>
    </select>
    <input class="btn-danger" id="go-places" type="button" value="Go">
    <div>
      <div class="inline_block button_spacing"></div><input id="new-search" type="button" value="Reset Map" class="reset_button">
    </div>
  </div>

  <div class="amenities_mapping">
    <div class="map_interface">
    </div>
    <div id="map"></div>
  </div>
  <div><a id="renting"></div>
</div>
<!-- Amenities w/ Map block END -->

<!-- Renting in suburb block -->
<div class="show_renting">
  <div class="renting_description">
    <h2>Renting in <%= @suburb.name %></h2>
    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dolorum aut numquam cumque voluptas! Ab quod suscipit distinctio odio asperiores praesentium facere numquam, accusamus corrupti, id quasi, labore quos animi nisi.</p>

    <h3>Average Rent Rates</h3>
    <p>Apartment: $650 per week</p>
    <p>Town house: $1,000 per week</p>
    <p>Suburban house: $1,500 per week</p>
  </div>
  <div class="renting_stats">
    <div class="renting_stats_apartments">
      <div class="stats_icon">
        <p>[Apartment icon]</p>
      </div>
      <div class="stats_texts">
        <p class="text-uppercase font-weight-light">Apartments</p>
        <p><b>300 available</b></p>
      </div>
    </div>

    <div class="renting_stats_townhouses">
      <div class="stats_icon">
        <p>[Town house icon]</p>
      </div>
      <div class="stats_texts">
        <p class="text-uppercase font-weight-light">Town houses</p>
        <p><b>22 available</b></p>
      </div>
    </div>

    <div class="renting_stats_suburban">
      <div class="stats_icon">
        <p>[Town house icon]</p>
      </div>
      <div class="stats_texts">
        <p class="text-uppercase font-weight-light">Suburban houses</p>
        <p><b>20 available</b></p>
      </div>
    </div>
  </div>
<div>
<div class="property_gallery">
  <!--  Property Gallery -->
  <h5> Top listings of the week <span class="sponsor text-muted">- Brought to you by <span class="domain_color">Domain</span></h5>
  <div class="card-deck">
  <!-- First House -->
  <% @suburb.houses.each do |house| %>
  <div class="card rent_card domain_image">
    <a href="<%= house.url %>" target="_blank" class="domain_link">
    <img src="/assets/properties/<%= house.img_path %>" class="card-img-top" alt="...">
    <div class="card-body rent_specs">
      <h5 class="card-title text_greyed">
        <span class="specs_space"><%= house.beds %> <i class="fa fa-bed"></i></span>
        <span class="specs_space"><%= house.baths %> <i class="fa fa-bath"></i></span>
        <span class="specs_space"><%= house.cars %> <i class="fa fa-car"></i></span>

      </h5>
      <p class="card-text text-muted"><%= house.address %></p>
      <span class="text-muted">$<b><%= number_with_delimiter(house.price, :delimiter => ',')%> pw</b></span>
    </div>
    </a>
  </div>
  <% end %>
</div>
  <!--  Property Gallery -->
</div>
  <a id="<%=  %>transport"></div>
</div>
<!-- Renting in suburb block END -->

<!-- Transport in suburb block -->
<div class="show_transport">
  <div class="transport_description" >
    <h2>Access to public transport</h2>
    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dolorum aut numquam cumque voluptas! Ab quod suscipit distinctio odio asperiores praesentium facere numquam, accusamus corrupti, id quasi, labore quos animi nisi.</p>
    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dolorum aut numquam cumque voluptas! Ab quod suscipit distinctio odio asperiores praesentium facere numquam, accusamus corrupti, id quasi, labore quos animi nisi.</p>
  </div>
  <div class="transport_stats">
    <div class="transport_stats_trains">
      <div class="stats_icon">
        <p><i class="fa fa-train fa-5x"></i></p>
      </div>
      <div class="stats_texts_transport">
        <p class="text-uppercase font-weight-light">Trains</p>
        <p><b>T1, T4</b></p>
        <p class="text-justify">Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>
      </div>
    </div>

    <div class="transport_stats_buses">
      <div class="stats_icon">
        <p><i class="fa fa-bus fa-5x"></i></p>
      </div>
      <div class="stats_texts_transport">
        <p class="text-uppercase font-weight-light">Buses</p>
        <p><b>333, 387, 389</b></p>
        <p class="text-justify">Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>
      </div>
    </div>
  </div>
<div><a id="lifestyle"></div>
</div>
<!-- Transport in suburb block END -->

<!-- Lifestyle text/image block -->
<div class="show_lifestyle">
  <div class="lifestyle_description">
    <h2>Lifestyle</h2>
    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Cumque eveniet, dolores soluta! Beatae quod asperiores quo sequi quam, vero voluptatem deserunt. Officiis repudiandae velit, ea numquam beatae! Aut, eum, eos.</p>
    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Cumque eveniet, dolores soluta! Beatae quod asperiores quo sequi quam, vero voluptatem deserunt. Officiis repudiandae velit, ea numquam beatae! Aut, eum, eos.</p>
  </div>
  <div class="lifestyle_image">
    <img src="<%= @suburb.image_url %>" class="" style="width: 35rem;" alt="<%= @suburb.name %> lifestyle image">
  </div>
<div><a id="living_cost"></div>
</div>
<!-- Lifestyle block END -->

<!-- Cost of living block -->
<div class="show_living_cost">
  <div class="living_cost_description">
    <h2>Cost of living</h2>
    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Eligendi, architecto, voluptas rem quos at voluptatibus ducimus nemo quae dolorem veritatis non, accusantium porro dolore! Facere placeat quam, iure reiciendis dolorem.</p>
    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Eligendi, architecto, voluptas rem quos at voluptatibus ducimus nemo quae dolorem veritatis non, accusantium porro dolore! Facere placeat quam, iure reiciendis dolorem.</p>
  </div>
  <div class="living_cost_breakdown">
    <h3>Family of four</h3>
      <p>[$1,400] per week</p>
    <h3>Couple</h3>
      <p>[$1,300] per week</p>
    <h3>Single Young Professional</h3>
      <p>[$1,000] per week</p>
  </div>
<!-- anchor link for secondary nav -->
<div><a id="entertainment"></div>
</div>
<!-- Cost of living block END -->

<!-- Entertainment text/image block -->
<div class="show_entertainment">
  <div class="entertainment_description">
    <h2>Entertainment</h2>
    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Cumque eveniet, dolores soluta! Beatae quod asperiores quo sequi quam, vero voluptatem deserunt. Officiis repudiandae velit, ea numquam beatae! Aut, eum, eos.</p>
    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Cumque eveniet, dolores soluta! Beatae quod asperiores quo sequi quam, vero voluptatem deserunt. Officiis repudiandae velit, ea numquam beatae! Aut, eum, eos.</p>
  </div>
  <div class="entertainment_image">
    <img src="<%= @suburb.image_url %>" class="" style="width: 35rem;" alt="<%= @suburb.name %> entertainment image">
  </div>
</div>
<!-- Entertainment text/image block END -->
